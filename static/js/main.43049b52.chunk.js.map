{"version":3,"sources":["serviceWorker.js","components/Card.js","components/CardList.js","components/Scroll.js","components/SearchBox.js","components/ErrorBoundary.js","container/App.js","action.js","constants.js","reducers.js","index.js"],"names":["Boolean","window","location","hostname","match","Card","_ref","id","bgColor","name","email","gender","react_default","a","createElement","className","concat","src","alt","CardList","data","map","user","src_components_Card","first","key","Scroll","props","style","overflowY","border","height","children","SearchBox","searchField","searchChange","type","placeholder","onChange","value","ErrorBoundary","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","hasError","error","info","setState","Component","App","componentDidMount","onRequestPeople","_this$props","onSearchChange","people","isPending","filteredPeople","filter","toLowerCase","includes","components_SearchBox","components_Scroll","components_ErrorBoundary","components_CardList","connect","searchPeople","requestPeople","dispatch","event","payload","target","fetch","then","res","json","users","forEach","idx","catch","initialStateSearch","initialStatePeople","logger","createLogger","rootReducers","combineReducers","arguments","length","undefined","action","assign","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","es","src_container_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.43049b52.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\r\nimport 'tachyons';\r\nimport './Card.css';\r\n\r\n// class Card extends Component {\r\n//     render() {\r\n//         return (\r\n//             <div className=\"bg-light-pink br3 pa3 mr2 grow bw2 shadow-5 dib\">\r\n//                 <img src=\"https://robohash.org/1?300x300\" alt=\"robots\"/>\r\n//                 <div>\r\n//                     <h2>Jane Doe</h2>\r\n//                     <p>janedoe@gmail.com</p>\r\n//                 </div>\r\n//             </div>\r\n//         )\r\n//     }\r\n// }\r\n\r\nconst Card = ({id, name, email, gender}) => {\r\n    var bgColor;\r\n    if (gender === \"male\") {\r\n        bgColor = \"bg-light-blue\"\r\n    } else {\r\n        bgColor = \"bg-light-red\"\r\n    }\r\n\r\n    return (\r\n        <div className={`${bgColor} br3 pa3 ma2 grow bw2 shadow-5 dib`}>\r\n            {/* <img src={`https://robohash.org/${id}?200x200`} alt=\"robots\"/> */}\r\n            <img src={`http://i.pravatar.cc/300?u=${email}`} alt=\"robots\" className=\"br-100\"/>\r\n            <div>\r\n                <h2 className=\"ttc\">{name}</h2>\r\n                <p>{email}</p>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Card;","import React from 'react';\r\nimport Card from \"./Card\";\r\n\r\nconst CardList = ({ data }) => {\r\n    \r\n    return (\r\n        <div>\r\n            {\r\n                data.map(user => \r\n                <Card id={user.id} \r\n                    name={user.name.first} \r\n                    email={user.email} \r\n                    key={user.id}\r\n                    gender = {user.gender}\r\n                />)\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default CardList;","import React from 'react';\r\n\r\nconst Scroll = (props) => {\r\n    return (\r\n        <div style={{ overflowY: 'scroll', border: '10px solid purple', height: '500px'}}>\r\n            {props.children}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Scroll;","import React from 'react';\r\n\r\nconst SearchBox = ({ searchField, searchChange}) => {\r\n    return (\r\n        <div className=\"pa2 mb5\">\r\n            <input \r\n                type=\"search\" \r\n                placeholder=\"Search People\" \r\n                className=\"pa3 ba b--green bg-lightest-blue\" \r\n                onChange={searchChange}\r\n                value={searchField}\r\n            />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default SearchBox;","import React, { Component } from 'react';\r\n\r\nclass ErrorBoundary extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            hasError: false\r\n        }\r\n    }\r\n\r\n    componentDidCatch(error, info) {\r\n        this.setState({ hasError : true })\r\n    }\r\n\r\n    render() {\r\n        if (this.state.hasError) {\r\n            return <h1>This part is not good!</h1>\r\n        }\r\n\r\n        return this.props.children;\r\n    }\r\n}\r\n\r\nexport default ErrorBoundary;","import React, { Component } from 'react';\nimport CardList from \"../components/CardList\";\nimport Scroll from \"../components/Scroll\";\nimport SearchBox from \"../components/SearchBox\";\nimport ErrorBoundary from \"../components/ErrorBoundary\";\nimport './App.css';\nimport { setSearchField, requestPeople } from '../action';\nimport { connect } from 'react-redux';\n\nconst mapStateToProps = (state) => {\n  return {\n    searchField: state.searchPeople.searchField,\n    people: state.requestPeople.people,\n    isPending: state.requestPeople.isPending,\n    error: state.requestPeople.error\n  }\n}\n\nconst mapDispatchToProps = (dispatch) => ({\n  onSearchChange: (event) => dispatch(setSearchField(event.target.value)),\n  onRequestPeople: () => dispatch(requestPeople())\n})\n\nclass App extends Component {\n\n  // onSearchChange = (e) => {\n  //   this.setState({searchField: e.target.value});\n  //   // this.setState({robots: filteredRobos});\n  // }\n\n  componentDidMount = () => {\n    this.props.onRequestPeople();\n  }\n\n  render() {\n    const { searchField, onSearchChange, people, isPending } = this.props;\n\n    const filteredPeople = people.filter(user => {\n      return user.name.first.toLowerCase().includes(searchField.toLowerCase());\n    });\n    \n    if (isPending) {\n      return (\n        <h1 className=\"tc pa5 ma5 light-yellow\">Loading...</h1>\n      )\n    } else {\n      return (\n        <div className=\"tc\">\n          <h1 className=\"ttu gold\">People</h1>\n          <SearchBox searchChange={onSearchChange} searchField={searchField}/>\n          <Scroll>\n            <ErrorBoundary>\n              <CardList data={filteredPeople} />\n            </ErrorBoundary>\n          </Scroll>\n        </div>\n      );\n    }\n  }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n","import { \r\n    CHANGE_SEARCH_FIELD, \r\n    REQUEST_PEOPLE_FAILED, \r\n    REQUEST_PEOPLE_SUCCESS, \r\n    REQUEST_PEOPLE_PENDING \r\n} from './constants';\r\n\r\nexport const setSearchField = (text) => ({\r\n    type: CHANGE_SEARCH_FIELD,\r\n    // Whatever data user needs\r\n    payload: text\r\n})\r\n\r\nexport const requestPeople = () => (dispatch) => {\r\n    dispatch({ type: REQUEST_PEOPLE_PENDING});\r\n    fetch(\"https://randomuser.me/api/?results=100\")\r\n    .then(res => res.json())\r\n    .then(data => {\r\n        const users = data[\"results\"];\r\n        users.forEach((user, idx) => {user.id = idx});\r\n        dispatch({ type: REQUEST_PEOPLE_SUCCESS, payload: users})\r\n    })\r\n    .catch(error => dispatch({type: REQUEST_PEOPLE_FAILED, payload: error }))\r\n}","export const CHANGE_SEARCH_FIELD = 'CHANGE_SEARCH_FIELD';\r\n\r\nexport const REQUEST_PEOPLE_PENDING = 'REQUEST_PEOPLE_PENDING';\r\nexport const REQUEST_PEOPLE_SUCCESS = 'REQUEST_PEOPLE_SUCCESS';\r\nexport const REQUEST_PEOPLE_FAILED = 'REQUEST_PEOPLE_FAILED';","import { CHANGE_SEARCH_FIELD, REQUEST_PEOPLE_FAILED, REQUEST_PEOPLE_SUCCESS, REQUEST_PEOPLE_PENDING } from './constants';\r\n\r\nconst initialStateSearch = {\r\n    searchField: ''\r\n}\r\n\r\n// state: state of the application\r\n// action is just a empty object\r\nexport const searchPeople = (state=initialStateSearch, action={}) => {\r\n    switch(action.type) {\r\n        case CHANGE_SEARCH_FIELD:\r\n            return Object.assign({}, state, { searchField: action.payload });\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nconst initialStatePeople = {\r\n    people : [],\r\n    error : '',\r\n    isPending : false\r\n}\r\n\r\nexport const requestPeople = (state=initialStatePeople, action={}) => {\r\n    switch(action.type) {\r\n        case REQUEST_PEOPLE_PENDING:\r\n            return Object.assign({}, state, {isPending : true})\r\n        case REQUEST_PEOPLE_SUCCESS:\r\n            return Object.assign({}, state, {people : action.payload, isPending : false})\r\n        case REQUEST_PEOPLE_FAILED:\r\n            return Object.assign({}, state, {error: action.payload, isPending: false})\r\n        default:\r\n            return state;\r\n    }\r\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { createStore, applyMiddleware, combineReducers } from 'redux';\nimport { createLogger } from 'redux-logger';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\nimport App from \"./container/App\";\nimport { searchPeople, requestPeople } from './reducers';\nimport thunkMiddleware from 'redux-thunk';\n\nconst logger = createLogger();\nconst rootReducers = combineReducers({searchPeople, requestPeople})\nconst store = createStore(rootReducers, applyMiddleware(thunkMiddleware,  logger))\n\nReactDOM.render(\n                <Provider store={store}>\n                    <App />\n                </Provider>, \n                document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}